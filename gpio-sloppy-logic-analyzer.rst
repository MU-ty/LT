===============================================
基于 Linux 内核 GPIO 的非严格逻辑分析仪
===============================================

:作者: Wolfram Sang

简介
============

本文简要介绍了如何在一个孤立的 CPU 上运行基于 GPIO 的内核非严格逻辑分析仪。

非严格逻辑分析仪将利用系统上的几根 GPIO 线以输入模式快速采样这些数字线，如果满足奈奎斯特准则，将产生一个时间序列日志，其中包含这些线路上出现的近似波形。一种使用方法是分析连接到这些 GPIO 线的外部流量（即数字探头），作为通用逻辑分析仪。

另一个特性是如果这些外设的 I/O 细胞可以同时用作 GPIO 输入模式和为外设提供输入或输出，则可以窃听芯片上的外设。这意味着例如无需布线即可窃听 I2C 流量（如果您的硬件支持）。在引脚控制子系统下，这样的引脚控制器被称为“非严格”：某个特定的引脚可以同时与某个外设一起使用，并作为 GPIO 输入线。

请注意，这是一个最后的手段分析器，可能会受到延迟、非确定性代码路径和非可屏蔽中断的影响。它之所以被称为“非严格”，是有原因的。然而，对于例如远程开发，它可能有助于获得初步观察并辅助进一步调试。

设置
=====

您的内核必须启用 CONFIG_DEBUG_FS 和 CONFIG_CPUSETS。理想情况下，您的运行时环境不使用 cpusets，否则，隔离 CPU 核心是最简单的。如果您确实需要 cpusets，请检查非严格逻辑分析仪的帮助脚本是否与您的其他设置冲突。

告诉内核哪些 GPIO 作为探头使用。对于基于设备树的系统，您需要使用以下绑定。因为这些绑定仅用于调试，所以没有官方架构::

    i2c-analyzer {
            compatible = "gpio-sloppy-logic-analyzer";
            probe-gpios = <&gpio6 21 GPIO_OPEN_DRAIN>, <&gpio6 4 GPIO_OPEN_DRAIN>;
            probe-names = "SCL", "SDA";
    };

请注意，您必须为每个指定的 GPIO 提供一个名称。目前支持最多 8 个探头。32 个可能可行，但尚未实现。

用法
=====

逻辑分析仪可通过 debugfs 中的文件进行配置。然而，强烈建议不要直接使用它们，而是使用脚本 ``tools/gpio/gpio-sloppy-logic-analyzer``。除了更彻底地检查参数外，它还将隔离 CPU 核心，这样在测量时您会受到最小的干扰。

脚本有一个帮助选项，解释了参数。对于上述分析 Renesas Salvator-XS 板上 400kHz I2C 总线的设备树片段，以下设置被使用：孤立的 CPU 应该是 CPU1，因为在大核心和小核心设置中它是一个大核心。因为 CPU1 是默认的，所以我们不需要参数。总线速度是 400kHz。因此，采样定理说我们至少需要以 800kHz 的频率采样。然而，I2C 开始条件的两个信号的下降沿发生得更快，因此我们需要更高的采样频率，例如 ``-s 1500000`` 表示 1.5MHz。此外，我们不希望立即采样，而是等待空闲总线上的开始条件。因此，我们需要设置一个触发器，在 SDA 下降沿同时 SCL 保持高电平，即 ``-t 1H+2F``。最后是持续时间，假设这里为 15ms，结果参数为 ``-d 15000``。所以，总的来说::

    gpio-sloppy-logic-analyzer -s 1500000 -t 1H+2F -d 15000

请注意，进程将返回提示符，但子进程仍在后台采样。除非这个过程完成，否则您在当前或指定目录中找不到结果文件。对于上述示例，我们需要触发 I2C 通信::

    i2cdetect -y -r <your bus number>

结果是 .sr 文件，可以使用来自自由 `sigrok`_ 项目的 PulseView 或 sigrok-cli 进行处理。它是一个 zip 文件，也包含二进制样本数据，可供其他软件使用。文件名是逻辑分析仪实例名称加上自 epoch 的时间戳。

.. _sigrok: https://sigrok.org/